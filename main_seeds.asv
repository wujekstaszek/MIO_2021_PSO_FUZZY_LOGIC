warning off; clear; clc; close all;

%% AUTORZY
% Piotr Matiaszewski, Aleksander Morgała, Jakub Perlak

%% DATA PREPERATION
% LOAD SHUFFLED SET 
load dataset_seeds.txt;                                         % load set
data = dataset_seeds(randperm(size(dataset_seeds, 1)),:);       % shuffle set using permutation

% GET PROBLEM'S SIZES AND DIMENSIONS
data_sizes = size(data);

global inputs_num
inputs_num = size(data,2)-1;        % number of input variables
outputs_num = size(data,2)-inputs_num;

mf_input_values = 3;                % number of values in input functions
global mf_output_classes_num
mf_output_classes_num = 3;          % number of classes in output functions

global rules_num
rules_num = mf_input_values^inputs_num * mf_output_classes_num;
params_num = mf_input_values * inputs_num * 3;
total_dim = rules_num + params_num;

% NORMALIZE DATA

mins = min(data(:,1:inputs_num));
maxs = max(data(:,1:inputs_num));
data = [(data(:,1:inputs_num)-mins)./(maxs-mins),data(:,inputs_num+1)];

% GET TEST AND LEARN SETS
global test
test_size = data_sizes(1) * 0.1;     % size of test set
test = data(1:test_size,:);

global learn
learn = data(test_size+1:end,:);

% FUZZY LOGIC DEFINITION
global fis
fis = mamfis("NumInputs",inputs_num,"NumOutputs",outputs_num);
fis.name = "Seeds classification problem fuzzy system";                          % FIS name

% FL INPUTS
input_names = {'area'; 'perimiter'; 'compactness'; 'length of kernel'; 'width of kernel';...    % input variables' names
               'assymetry coefficient'; 'length of kernel groove'};   
mf_input_names = {'Bad','Medium','Good'};                                       % names of input variables' membership functions

for i = 1:inputs_num
    for j = 1:mf_input_values
        fis.inputs(i).membershipfunctions(j).name = mf_input_names{j};
    end
    fis.inputs(i).name = input_names{i};
end

% FL OUTPUTS
output_names = ['Iris class'];                                                  % outputs' names
mf_output_names = {'Class 1','Class 2','Class 3'};                              % names of output variables' membership functions
output_params = [-0.5 0 0.5; 0.25 0.5 0.75; 0.5 1 1.5];                         % parameters of output variables' membership functions

for i = 1:outputs_num
    for j = 1:mf_output_classes_num
        fis.outputs(i).membershipfunctions(j).name = mf_output_names{j};
        fis.outputs(i).membershipfunctions(j).params = output_params(j,:);
    end
    fis.outputs(i).name = output_names(i);
end

load dataset_seeds.txt
data = dataset_seeds;
data_size = size(data);
data=data(randperm(size(data, 1)), :);
inputs=size(data,2)-1;
test_size = data_size(1)/10;
mf_inp=3;
rules = mf_inp^inputs*mf_inp;
params = mf_inp * inputs * 3;
total_dim = rules + params;
mf_out = 3;



lb=zeros(total_dim);
ub=ones(total_dim);

input_names = {'input1'; 'input2';'input3'; 'input4';'input5';'input6';'input7';};
output_name = 'Seed class';

mins = min(data(:,1:7));
maxs = max(data(:,1:7));

data = [(data(:,1:7)-mins)./(maxs-mins),data(:,8)];

test=data(1:test_size,:);
learn=data(test_size+1:end,:);

mf_input_names = {'Bad','Medium','Good'};
mf_output_names = {'Class 1','Class 2','Class 3'};

fis = mamfis("NumInputs",inputs,"NumOutputs",1);
fis.name = "Iris classification problem fuzzy system"; 
for i = 1:inputs
    for j = 1:mf_inp
        fis.inputs(i).membershipfunctions(j).name = mf_input_names{j};
    end
    fis.inputs(i).name = input_names{i};
end
output_params = [-0.5 0 0.5;0.25 0.5 0.75;0.5 1 1.5];
for j = 1:mf_out
fis.outputs(1).membershipfunctions(j).name = mf_output_names{j};
fis.outputs(1).mf(j).params = output_params(j,:);
end
fis.outputs(1).name = output_name;
%DO OGARNIĘCIA RULSY
global ruleList
ruleList = get_rule_list(inputs, mf_inp);

fis.Rules = [];
fis = addRule(fis, ruleList);

fun=@(x)updateVariables(x);
options = optimoptions('particleswarm','MaxIterations',500,'SwarmSize',250,'Display','iter','MaxStallIterations', 20, 'ObjectiveLimit', 0,"SelfAdjustmentWeight",4,"SocialAdjustmentWeight",4);
data_result = particleswarm(fun,total_dim,lb,ub,options);
test_function(data_result);
save("seedsc4c4","data_result");

%%

function result = test_function(vars)
    global fis
    global test
    updateVariables(vars)
    result = floor(evalfis(fis,test(:,1:7))*3+1);
    result = result == test(:,8);
end
function procentage_result = updateVariables(vars)
    global fis
    global learn
    global ruleList
    global rules
    global mf_inp
    global inputs
    global results
    max1 = rules;
    ruleList(:,9) = vars(1:max1);
    fis.Rules = [];
    fis = addRule(fis,ruleList);
    for i = 0:(inputs-1)
        for j = 0:(mf_inp-1)
            x=max1+i*9+j*3;
            temp = [vars(x+1),vars(x+2),vars(x+3)];
            fis.inputs(i+1).membershipfunctions(j+1).parameters = [min(temp),median(temp),max(temp)];
        end
    end
    results = floor(evalfis(fis,learn(:,1:7))*3+1);
    results = results ~= learn(:,8);
    
    
    procentage_result = mean(results);
end

function m = get_rule_list(number_of_inputs, number_of_rules_values)
    num_of_combinations = number_of_rules_values^(number_of_inputs+1);
    m = zeros(num_of_combinations,number_of_inputs+3,'double'); % 1 for output, 1 for weight, 1 for and/or

    for i = 0:num_of_combinations-1
        num = dec2base(i,number_of_rules_values);
        len_diff = number_of_inputs + 1 - strlength(num);
        
        if len_diff > 0
           zerros = '';
           for j = 1:len_diff
               zerros = strcat('0', zerros);
           end
           num = strcat(zerros,num);
        end
        
        num = strcat(num,'00');
        
        for j = 1:(number_of_inputs+3)
            m(i+1,j) = str2double(num(j)) + 1;
        end
    end
end



